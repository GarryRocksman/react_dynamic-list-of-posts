{"version":3,"sources":["components/PostList/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","posts","selectedPostId","handleSelectedPostId","_jsxs","children","_jsx","className","map","post","id","title","type","onClick","Loader","BASE_URL","request","url","delay","data","arguments","length","undefined","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","client","deleteComment","commentId","concat","NewCommentForm","handleAddCommentToState","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","setBody","_useState7","_useState8","creationCommentError","setCreationCommentError","_useState9","_useState10","isInputError","setIsInputError","_useState11","_useState12","isCommentPosted","setIsCommentPosted","clear","postComment","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newPost","commentFromServer","wrap","_context","prev","next","postId","sent","t0","stop","apply","handleInput","event","target","value","Error","htmlFor","placeholder","cn","onChange","_Fragment","preventDefault","trim","PostDetails","comments","setComments","commentsLoadingError","setCommentsLoadingError","isCommentsLoading","setIsCommentsLoading","isCommentSectionShow","setIsCommentSectionShow","commentsLoaded","setCommentLoaded","isDeletionError","setIsDeletionError","isCommentsButtonShow","isCommentsLoaded","isLoadingSuccessful","getCommentsFromServer","commentsFromServer","postID","useEffect","handleDeleteComment","_ref3","_callee2","_context2","prevComments","filter","comment","_x","href","prevState","_toConsumableArray","UserSelector","React","memo","users","selectedUserId","handleSelectUser","dropdownRef","useRef","isDropdownOpen","setIsDropdownOpen","selectedUser","find","user","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","role","userId","App","setUsers","setPosts","isError","setIsError","setSelectedUserId","setSelectedPostId","isPostLoading","setIsPostLoading","_useState13","_useState14","postsLoaded","setPostsLoaded","selectedPost","getUsersFromServer","usersFromServer","getUserPostsFromServer","postsFromServer","classNames","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4ce3a1c8.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPostId: number;\n  handleSelectedPostId: (postId: number) => void;\n};\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  handleSelectedPostId,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPostId !== post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => {\n                      handleSelectedPostId(post.id);\n                    }}\n                  >\n                    Open\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => {\n                      handleSelectedPostId(0);\n                    }}\n                  >\n                    Close\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport comment from '../types/Comment';\nimport { CommentPostRequest } from '../types/CommentPostRequest';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postID: number) => {\n  return client.get<comment[]>(`/comments?postId=${postID}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (data: CommentPostRequest) => {\n  return client.post<comment>('/comments/', data);\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { createComment } from '../../api/posts';\nimport cm from '../../types/Comment';\n\ntype Props = {\n  selectedPostId: number;\n  handleAddCommentToState: (comment: cm) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  handleAddCommentToState,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [creationCommentError, setCreationCommentError] = useState(false);\n  const [isInputError, setIsInputError] = useState(false);\n  const [isCommentPosted, setIsCommentPosted] = useState(true);\n\n  const clear = () => {\n    setIsInputError(false);\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const postComment = async () => {\n    const newPost = {\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    };\n\n    try {\n      setIsCommentPosted(false);\n\n      const commentFromServer = await createComment(newPost);\n\n      handleAddCommentToState(commentFromServer);\n\n      setBody('');\n      setIsInputError(false);\n\n      setIsCommentPosted(true);\n    } catch {\n      setCreationCommentError(true);\n      clear();\n    }\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (name.trim() === ''\n    || email.trim() === ''\n    || body.trim() === '') {\n      setIsInputError(true);\n    } else {\n      postComment();\n    }\n  };\n\n  const handleCommentPostingError = () => {\n    setCreationCommentError(false);\n  };\n\n  const handleInput\n    = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const field = event.target.name;\n\n      switch (field) {\n        case 'name':\n          setName(event.target.value);\n          break;\n\n        case 'email':\n          setEmail(event.target.value);\n          break;\n\n        case 'body':\n          setBody(event.target.value);\n          break;\n\n        default:\n          throw new Error('Unexpected field name');\n      }\n    };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              ' is-danger': isInputError && !name.length,\n            })}\n            onChange={handleInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {(isInputError && !name.length) && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Name is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              ' is-danger': isInputError && !email.length,\n            })}\n            onChange={handleInput}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {(isInputError && !email.length) && (\n            <>\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                Email is required\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            placeholder=\"Type comment here\"\n            className={cn('input', {\n              ' is-danger': isInputError && !body.length,\n            })}\n            onChange={handleInput}\n          />\n        </div>\n\n        {(isInputError && !body.length) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': !isCommentPosted,\n            })}\n            onClick={handleFormSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            aria-label=\"reset-button\"\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n      {creationCommentError && (\n        <div className=\"notification is-danger\">\n          <button\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"deletion-button\"\n            onClick={handleCommentPostingError}\n          />\n          Can`t create a comment\n        </div>\n      )}\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { deleteComment, getPostComments } from '../../api/posts';\nimport cm from '../../types/Comment';\n\ntype Props = {\n  post: Post | null;\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  selectedPostId,\n}) => {\n  const [comments, setComments] = useState<cm[]>([]);\n  const [commentsLoadingError, setCommentsLoadingError] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isCommentSectionShow, setIsCommentSectionShow] = useState(false);\n  const [commentsLoaded, setCommentLoaded] = useState(false);\n  const [isDeletionError, setIsDeletionError] = useState(false);\n  const isCommentsButtonShow = !isCommentSectionShow\n    && !commentsLoadingError\n    && !isCommentsLoading;\n  const isCommentsLoaded = commentsLoaded && !commentsLoadingError;\n  const isLoadingSuccessful = isCommentsLoading && !commentsLoadingError;\n\n  const getCommentsFromServer = async () => {\n    setComments([]);\n    try {\n      if (post) {\n        setCommentLoaded(false);\n        setIsCommentsLoading(true);\n\n        const commentsFromServer = await getPostComments(post.id);\n\n        setComments(commentsFromServer);\n        setIsCommentsLoading(false);\n        setCommentLoaded(true);\n      }\n    } catch {\n      setCommentsLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    getCommentsFromServer();\n  }, [post]);\n\n  useEffect(() => {\n    if (isCommentSectionShow) {\n      setIsCommentSectionShow(false);\n    }\n  }, [selectedPostId]);\n\n  const handleDeleteComment = async (commentId: number) => {\n    setComments(prevComments => prevComments\n      .filter(comment => comment.id !== commentId));\n    setIsCommentSectionShow(false);\n    try {\n      await deleteComment(commentId);\n    } catch {\n      setIsDeletionError(true);\n    }\n  };\n\n  const handleAddCommentToState = (comment: cm) => {\n    setComments(prevComments => [...prevComments, comment]);\n  };\n\n  return (\n    <>\n      {post && (\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"content\" data-cy=\"PostDetails\">\n            <div className=\"block\">\n              <h2 data-cy=\"PostTitle\">\n                {`#${post.id}: ${post.title}`}\n              </h2>\n\n              <p data-cy=\"PostBody\">\n                {post.body}\n              </p>\n            </div>\n\n            <div className=\"block\">\n              {isLoadingSuccessful && <Loader />}\n\n              {commentsLoadingError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {isCommentsLoaded && (\n                !comments.length\n                  ? (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  )\n                  : (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n\n                      {comments.map(comment => (\n                        <article\n                          key={comment.id}\n                          className=\"message is-small\"\n                          data-cy=\"Comment\"\n                        >\n                          <div className=\"message-header\">\n                            <a\n                              href={`mailto:${comment.email}`}\n                              data-cy=\"CommentAuthor\"\n                            >\n                              {comment.name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => {\n                                handleDeleteComment(comment.id);\n                              }}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {comment.body}\n                          </div>\n                          {isDeletionError && (\n                            <div className=\"notification is-danger\">\n                              <button\n                                type=\"button\"\n                                aria-label=\"delete-comment-button\"\n                                className=\"delete\"\n                                onClick={() => {\n                                  setIsDeletionError(false);\n                                }}\n                              />\n                              Can`t delete comment\n                            </div>\n                          )}\n                        </article>\n                      ))}\n                    </>\n                  ))}\n            </div>\n\n            {isCommentsButtonShow && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => {\n                  setIsCommentSectionShow(prevState => !prevState);\n                }}\n              >\n                Write a comment\n              </button>\n            )}\n\n            {isCommentSectionShow\n            && (\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                handleAddCommentToState={handleAddCommentToState}\n              />\n            )}\n          </div>\n\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUserId: number;\n  handleSelectUser: (userId: number) => void;\n};\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUserId,\n  handleSelectUser,\n}) => {\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const selectedUser = users.find(user => user.id === selectedUserId);\n\n  const handleClick = (userId: number) => {\n    handleSelectUser(userId);\n    setIsDropdownOpen(false);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)) {\n      setIsDropdownOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isDropdownOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsDropdownOpen(prevState => !prevState);\n          }}\n        >\n          <span>\n            {!selectedUser\n              ? 'Choose a user'\n              : selectedUser.name}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`/#user-${user.id}`}\n              className={cn('dropdown-item',\n                { 'is-active': selectedUserId === user.id })}\n              onClick={() => {\n                handleClick(user.id);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUserPosts, getUsers } from './api/posts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isPostLoading, setIsPostLoading] = useState(false);\n  const [postsLoaded, setPostsLoaded] = useState(false);\n\n  const selectedPost = posts.find(post => post.id === selectedPostId) || null;\n\n  const getUsersFromServer = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      setIsError(true);\n    }\n  };\n\n  const getUserPostsFromServer = async () => {\n    setPosts([]);\n    try {\n      setIsPostLoading(true);\n      setPostsLoaded(false);\n\n      const postsFromServer = await getUserPosts(selectedUserId);\n\n      setPosts(postsFromServer);\n      setIsPostLoading(false);\n      setPostsLoaded(true);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId !== 0) {\n      getUserPostsFromServer();\n    }\n  }, [selectedUserId]);\n\n  const handleSelectUser = (userId: number) => {\n    setSelectedUserId(userId);\n    setSelectedPostId(0);\n  };\n\n  const handleSelectedPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  handleSelectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {selectedUserId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {(isPostLoading && !isError) && <Loader /> }\n\n                {postsLoaded && (\n                  <>\n                    {!posts.length\n                      ? (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      )\n                      : (\n                        <PostsList\n                          posts={posts}\n                          selectedPostId={selectedPostId}\n                          handleSelectedPostId={handleSelectedPostId}\n                        />\n                      )}\n                  </>\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!selectedPostId },\n            )}\n          >\n\n            <div className=\"tile is-child box is-success\">\n              <PostDetails\n                post={selectedPost}\n                selectedPostId={selectedPostId}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}